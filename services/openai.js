/**
 * Servicio para interactuar con la API de OpenAI
 * Maneja la comunicaci√≥n con GPT-3.5-turbo
 */

const OpenAI = require('openai');

// Configurar cliente de OpenAI
let openai;

if (process.env.OPENAI_API_KEY) {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });
  console.log('‚úÖ Cliente de OpenAI inicializado');
} else {
  console.warn('‚ö†Ô∏è  OPENAI_API_KEY no configurada');
}

/**
 * Configuraci√≥n del chatbot - Optimizada para costos
 */
const CHATBOT_CONFIG = {
  model: 'gpt-3.5-turbo',
  maxTokens: 150, // Optimizado para costos (era 500)
  temperature: 0.7,
  systemPrompt: `Eres un asistente virtual √∫til y amigable que responde por WhatsApp. 
    Mant√©n respuestas concisas, m√°ximo 50 palabras.
    S√© directo pero amigable. Responde en espa√±ol.`
};

/**
 * Almac√©n simple de conversaciones en memoria
 * En producci√≥n, considera usar una base de datos
 */
const conversations = new Map();

/**
 * Obtener respuesta de OpenAI para un mensaje
 * @param {string} message - Mensaje del usuario
 * @param {string} userId - ID √∫nico del usuario (n√∫mero de tel√©fono)
 * @returns {Promise<string>} - Respuesta del chatbot
 */
async function getResponse(message, userId = 'anonymous') {
  try {
    console.log('\nüß† === INICIO PROCESAMIENTO OPENAI ===');
    console.log(`üìù Mensaje recibido: "${message}"`);
    console.log(`üë§ Usuario ID: ${userId}`);
    console.log(`üìè Longitud del mensaje: ${message.length} caracteres`);

    // Validar configuraci√≥n
    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå API key de OpenAI no configurada');
      throw new Error('API key de OpenAI no configurada');
    }

    if (!openai) {
      console.error('‚ùå Cliente de OpenAI no inicializado');
      throw new Error('Cliente de OpenAI no inicializado');
    }

    // Obtener historial de conversaci√≥n del usuario
    let conversationHistory = conversations.get(userId) || [];
    
    if (conversationHistory.length === 0) {
      console.log('üÜï Creando nuevo historial de conversaci√≥n para usuario');
    } else {
      console.log(`üìö Historial existente: ${conversationHistory.length} mensajes`);
    }

    // Agregar mensaje del usuario al historial
    conversationHistory.push({
      role: 'user',
      content: message
    });

    // Mantener solo los √∫ltimos 6 mensajes para optimizar costos
    if (conversationHistory.length > 6) {
      console.log('‚úÇÔ∏è  Recortando historial para optimizar costos');
      conversationHistory = conversationHistory.slice(-6);
    }

    // Preparar mensajes para la API
    const messages = [
      {
        role: 'system',
        content: CHATBOT_CONFIG.systemPrompt
      },
      ...conversationHistory
    ];

    console.log(`üì§ Enviando ${messages.length} mensajes a OpenAI...`);
    console.log('üí≠ Contexto completo:', JSON.stringify(messages, null, 2));

    // Llamada a la API de OpenAI
    const response = await openai.chat.completions.create({
      model: CHATBOT_CONFIG.model,
      messages: messages,
      max_tokens: CHATBOT_CONFIG.maxTokens,
      temperature: CHATBOT_CONFIG.temperature,
    });

    console.log('üì® Respuesta cruda de OpenAI:');
    console.log(JSON.stringify(response, null, 2));

    // Extraer la respuesta
    const aiMessage = response.choices[0]?.message?.content;
    
    if (!aiMessage) {
      console.error('‚ùå No se pudo extraer mensaje de la respuesta de OpenAI');
      throw new Error('Respuesta inv√°lida de OpenAI');
    }

    console.log(`üí¨ Mensaje extra√≠do: "${aiMessage}"`);
    console.log(`üìè Longitud de respuesta: ${aiMessage.length} caracteres`);
    console.log(`üí∞ Tokens usados: ${response.usage?.total_tokens || 'No disponible'}`);

    // Agregar respuesta al historial
    conversationHistory.push({
      role: 'assistant',
      content: aiMessage
    });

    // Guardar historial actualizado
    conversations.set(userId, conversationHistory);

    console.log(`üìö Historial actualizado: ${conversationHistory.length} mensajes`);
    console.log('üß† === FIN PROCESAMIENTO OPENAI ===\n');

    return aiMessage.trim();

  } catch (error) {
    console.error('\n‚ùå === ERROR EN OPENAI ===');
    console.error('üî¥ Error tipo:', error.constructor.name);
    console.error('üìã Mensaje de error:', error.message);
    console.error('üîç C√≥digo de error:', error.code || 'No disponible');
    console.error('üìä Detalles completos:', error);
    console.error('‚ùå === FIN ERROR OPENAI ===\n');

    // Manejar diferentes tipos de errores de OpenAI
    if (error.code === 'insufficient_quota') {
      throw new Error('Sin cr√©ditos suficientes en OpenAI. Agrega m√°s cr√©ditos en: https://platform.openai.com/account/billing');
    }
    
    if (error.code === 'invalid_api_key') {
      throw new Error('API key de OpenAI inv√°lida');
    }
    
    if (error.code === 'rate_limit_exceeded') {
      throw new Error('L√≠mite de rate de OpenAI excedido');
    }

    // Error gen√©rico
    throw new Error(`Error de OpenAI: ${error.message}`);
  }
}

/**
 * Limpiar historial de conversaci√≥n de un usuario
 * @param {string} userId - ID del usuario
 */
function clearConversation(userId) {
  conversations.delete(userId);
  console.log(`üóëÔ∏è  Historial de conversaci√≥n limpiado para usuario: ${userId}`);
}

/**
 * Obtener estad√≠sticas del servicio
 * @returns {object} - Estad√≠sticas b√°sicas
 */
function getStats() {
  return {
    activeConversations: conversations.size,
    totalMessages: Array.from(conversations.values()).reduce((total, conv) => total + conv.length, 0),
    model: CHATBOT_CONFIG.model,
    maxTokens: CHATBOT_CONFIG.maxTokens,
    temperature: CHATBOT_CONFIG.temperature
  };
}

/**
 * Configurar par√°metros del chatbot
 * @param {object} config - Nueva configuraci√≥n
 */
function updateConfig(config) {
  if (config.maxTokens) CHATBOT_CONFIG.maxTokens = config.maxTokens;
  if (config.temperature !== undefined) CHATBOT_CONFIG.temperature = config.temperature;
  if (config.systemPrompt) CHATBOT_CONFIG.systemPrompt = config.systemPrompt;
  
  console.log('‚öôÔ∏è  Configuraci√≥n del chatbot actualizada:', CHATBOT_CONFIG);
}

module.exports = {
  getResponse,
  clearConversation,
  getStats,
  updateConfig
};
